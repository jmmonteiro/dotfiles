#+TITLE: Configuration

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jo√£o M. Monteiro"
      user-mail-address "")
#+END_SRC
* Appearance
#+BEGIN_SRC emacs-lisp
;; Font
(setq doom-font (font-spec :family "monospace" :size 14))
;; Theme
(setq doom-theme 'doom-one)
;; Line numbers
(setq display-line-numbers-type t)
#+END_SRC

* Organisation
** Org-mode
*** Define location of org-files for the agenda
**** Org-mode
You need to set ~(setq org-directory "~/Dropbox/org/")~ before loading org. The reason that this line of code is not in the block below, is because ~org~ is loaded on ~config.el~ (i.e. before this file is loaded), since you need ~org~ to be loaded to read this ~settings.org~ file in the first place.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (directory-files-recursively org-directory "\.org$"))
#+END_SRC
**** Org-ref
#+BEGIN_SRC emacs-lisp
(require 'org-ref)
(setq reftex-default-bibliography '(concat org-directory  "ref.bib"))
(setq org-ref-pdf-directory "~/Documents/papers/")
#+END_SRC
*** Custom TODO workflow
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-todo-keywords
      '((sequence "TODO(t!)" "BLOCKED(b@/!)"  "|" "DONE(d!)" "CANCELED(c@)" "DELEGATED(o@/!)")))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "#74c95d" :weight bold)
                ("BLOCKED" :foreground "#cc6666" :weight bold)
                ("DONE" :foreground "#808080" :weight bold)
                ("CANCELLED" :foreground "#f0c674" :weight bold)
                ("DELEGATED" :foreground "#b294bb" :weight bold))))

)
#+END_SRC
*** Encryption
#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))

;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key "7C7C1C77")
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
; Display start of agenda to today
(setq org-agenda-start-day "0d")

; -- super-agenda
(setq org-super-agenda-header-map (make-sparse-keymap))
(setq spacemacs-theme-org-agenda-height nil
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)
(setq org-agenda-custom-commands
      '(("z" "Super zoom view"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                                :time-grid t
                                :date today
                                :todo "TODAY"
                                :scheduled today
                                :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                                 :todo "NEXT"
                                 :order 1)
                          (:name "Important"
                                 :tag "Important"
                                 :priority "A"
                                 :order 6)
                          (:name "Due Today"
                                 :deadline today
                                 :order 2)
                          (:name "Due Soon"
                                 :deadline future
                                 :order 8)
                          (:name "Overdue"
                                 :deadline past
                                 :order 7)
                          (:name "Waiting"
                                 :todo "WAIT"
                                 :order 20)
                          (:name "Regular work"
                                 :priority "B"
                                 :order 10)
                          (:name "Someday"
                                 :priority<= "C"
                                 :tag ("Trivial" "Unimportant")
                                 :todo ("SOMEDAY" )
                                 :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
(org-super-agenda-mode)
#+END_SRC

*** Notifications
#+BEGIN_SRC emacs-lisp
; Desktop notifications
(setq alert-default-style 'libnotify)
(setq appt-disp-window-function (lambda (min-to-app new-time appt-msg)
                                                         (alert appt-msg)))
(setq appt-delete-window-function (lambda ()))
; Rebuild the reminders everytime the agenda is displayed
(add-hook 'org-agenda-finalize-hook (lambda () (org-agenda-to-appt t)))
; Run once when Emacs starts
(org-agenda-to-appt t)
; Activate appointments so we get notifications
(appt-activate t)
#+END_SRC
*** Spelling
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
(add-hook 'markdown-mode-hook 'turn-on-flyspell)
#+END_SRC
** Org-roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory org-directory)
      (org-roam-index-file (concat org-directory "index.org"))
      (org-roam-graph-viewer "display")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n j" . org-roam-jump-to-index)
               ("C-c n b" . org-roam-switch-to-buffer)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))))

#+END_SRC
** Searching
Doom Emacs already uses ~ripgrep~ with SPC-n-s. Why not add ~deft~ as well with SPC-n-d?
#+BEGIN_SRC emacs-lisp
(use-package deft
  :config (setq deft-directory org-directory
                deft-extensions '("md" "org")
                deft-recursive t
                ))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
;; Make evil-mode up/down operate in screen lines instead of logical lines
(define-key evil-motion-state-map "j" 'evil-next-visual-line)
(define-key evil-motion-state-map "k" 'evil-previous-visual-line)
;; Also in visual mode
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)

; Restore "s" to the standard vim behaviour
; https://github.com/hlissner/doom-emacs/issues/1307
(after! evil-snipe
  (evil-snipe-mode -1))
#+END_SRC
* Programming
** General
#+BEGIN_SRC emacs-lisp
;; Projectile
(setq projectile-project-search-path '("~/git/"))
;; Auto-complete
(use-package company
  :init (global-company-mode))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :init (add-to-list 'company-backends 'company-jedi))
(use-package python
  :hook ((python-mode . jedi:setup)))

;; Debugger
(setq gud-pdb-command-name "python -m pdb ")

;; Autoformat on save
; Set M-x pdb command to use the virtualenv's python debugger
(add-hook 'python-mode-hook 'yapf-mode)
; Check linting
(add-hook 'python-mode-hook 'flycheck-mode)
; Sort imports
(add-hook 'before-save-hook 'py-isort-before-save)
#+END_SRC
